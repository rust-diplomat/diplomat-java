---
source: cli/src/backend/mod.rs
expression: res
---
package dev.diplomattest.somelib;

import dev.diplomattest.somelib.ntv.*;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.ref.Cleaner;
import java.lang.foreign.SegmentAllocator;
import java.util.List;
import static java.lang.foreign.ValueLayout.*;
import java.nio.charset.StandardCharsets;
import java.util.stream.Stream;

public class BorrowedFields {
    String a;
    String b;
    String c;
    

    List<Object> selfEdges = List.of();
    List<Object> aEdges = List.of();
    

    private BorrowedFields() {
    }

    BorrowedFields(MemorySegment structSegment, List<Object> aEdges) {
        this.selfEdges = selfEdges;
        this.aEdges = aEdges;
        

        var aNative = dev.diplomattest.somelib.ntv.BorrowedFields.a(structSegment);
        var aVal = SliceUtils.readUtf16(aNative);
        this.a = aVal;
        var bNative = dev.diplomattest.somelib.ntv.BorrowedFields.b(structSegment);
        var bVal = SliceUtils.readUtf8(bNative);
        this.b = bVal;
        var cNative = dev.diplomattest.somelib.ntv.BorrowedFields.c(structSegment);
        var cVal = SliceUtils.readUtf8(cNative);
        this.c = cVal;
        

    }

    MemorySegment toNative(SegmentAllocator arena) {
        var returnVal = dev.diplomattest.somelib.ntv.BorrowedFields.allocate(arena);
        
        var aData = arena.allocateFrom(a, StandardCharsets.UTF_16);
        var aLen = aData.byteSize() - 1;  // allocated strings are null terminated
        var aView = DiplomatString16View.allocate(arena);
        DiplomatString16View.len(aView, aLen);
        DiplomatString16View.data(aView, aData);
        dev.diplomattest.somelib.ntv.BorrowedFields.a(returnVal, aView);
        var bData= arena.allocateFrom(b, StandardCharsets.UTF_8);
        var bLen = bData.byteSize() - 1;  // allocated strings are null terminated
        var bView = DiplomatStringView.allocate(arena);
        DiplomatStringView.len(bView, bLen);
        DiplomatStringView.data(bView, bData);
        dev.diplomattest.somelib.ntv.BorrowedFields.b(returnVal, bView);
        var cData= arena.allocateFrom(c, StandardCharsets.UTF_8);
        var cLen = cData.byteSize() - 1;  // allocated strings are null terminated
        var cView = DiplomatStringView.allocate(arena);
        DiplomatStringView.len(cView, cLen);
        DiplomatStringView.data(cView, cData);
        dev.diplomattest.somelib.ntv.BorrowedFields.c(returnVal, cView);
        

        return returnVal;

    }
    
}


============================
package dev.diplomattest.somelib;

import dev.diplomattest.somelib.ntv.*;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.ref.Cleaner;
import java.lang.foreign.SegmentAllocator;
import java.util.List;
import static java.lang.foreign.ValueLayout.*;
import java.nio.charset.StandardCharsets;
import java.util.stream.Stream;

public class BorrowedFieldsReturning {
    String bytes;
    

    List<Object> selfEdges = List.of();
    List<Object> aEdges = List.of();
    

    private BorrowedFieldsReturning() {
    }

    BorrowedFieldsReturning(MemorySegment structSegment, List<Object> aEdges) {
        this.selfEdges = selfEdges;
        this.aEdges = aEdges;
        

        var bytesNative = dev.diplomattest.somelib.ntv.BorrowedFieldsReturning.bytes(structSegment);
        var bytesVal = SliceUtils.readUtf8(bytesNative);
        this.bytes = bytesVal;
        

    }

    MemorySegment toNative(SegmentAllocator arena) {
        var returnVal = dev.diplomattest.somelib.ntv.BorrowedFieldsReturning.allocate(arena);
        
        var bytesData= arena.allocateFrom(bytes, StandardCharsets.UTF_8);
        var bytesLen = bytesData.byteSize() - 1;  // allocated strings are null terminated
        var bytesView = DiplomatStringView.allocate(arena);
        DiplomatStringView.len(bytesView, bytesLen);
        DiplomatStringView.data(bytesView, bytesData);
        dev.diplomattest.somelib.ntv.BorrowedFieldsReturning.bytes(returnVal, bytesView);
        

        return returnVal;

    }
    
}


============================
package dev.diplomattest.somelib;

import dev.diplomattest.somelib.ntv.*;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.ref.Cleaner;
import java.lang.foreign.SegmentAllocator;
import java.util.List;
import static java.lang.foreign.ValueLayout.*;
import java.nio.charset.StandardCharsets;
import java.util.stream.Stream;

public class BorrowedFieldsWithBounds {
    String fieldA;
    String fieldB;
    String fieldC;
    

    List<Object> selfEdges = List.of();
    List<Object> aEdges = List.of();
    List<Object> bEdges = List.of();
    List<Object> cEdges = List.of();
    

    private BorrowedFieldsWithBounds() {
    }

    BorrowedFieldsWithBounds(MemorySegment structSegment, List<Object> aEdges, List<Object> bEdges, List<Object> cEdges) {
        this.selfEdges = selfEdges;
        this.aEdges = aEdges;
        this.bEdges = bEdges;
        this.cEdges = cEdges;
        

        var fieldANative = dev.diplomattest.somelib.ntv.BorrowedFieldsWithBounds.field_a(structSegment);
        var fieldAVal = SliceUtils.readUtf16(fieldANative);
        this.fieldA = fieldAVal;
        var fieldBNative = dev.diplomattest.somelib.ntv.BorrowedFieldsWithBounds.field_b(structSegment);
        var fieldBVal = SliceUtils.readUtf8(fieldBNative);
        this.fieldB = fieldBVal;
        var fieldCNative = dev.diplomattest.somelib.ntv.BorrowedFieldsWithBounds.field_c(structSegment);
        var fieldCVal = SliceUtils.readUtf8(fieldCNative);
        this.fieldC = fieldCVal;
        

    }

    MemorySegment toNative(SegmentAllocator arena) {
        var returnVal = dev.diplomattest.somelib.ntv.BorrowedFieldsWithBounds.allocate(arena);
        
        var fieldAData = arena.allocateFrom(fieldA, StandardCharsets.UTF_16);
        var fieldALen = fieldAData.byteSize() - 1;  // allocated strings are null terminated
        var fieldAView = DiplomatString16View.allocate(arena);
        DiplomatString16View.len(fieldAView, fieldALen);
        DiplomatString16View.data(fieldAView, fieldAData);
        dev.diplomattest.somelib.ntv.BorrowedFieldsWithBounds.field_a(returnVal, fieldAView);
        var fieldBData= arena.allocateFrom(fieldB, StandardCharsets.UTF_8);
        var fieldBLen = fieldBData.byteSize() - 1;  // allocated strings are null terminated
        var fieldBView = DiplomatStringView.allocate(arena);
        DiplomatStringView.len(fieldBView, fieldBLen);
        DiplomatStringView.data(fieldBView, fieldBData);
        dev.diplomattest.somelib.ntv.BorrowedFieldsWithBounds.field_b(returnVal, fieldBView);
        var fieldCData= arena.allocateFrom(fieldC, StandardCharsets.UTF_8);
        var fieldCLen = fieldCData.byteSize() - 1;  // allocated strings are null terminated
        var fieldCView = DiplomatStringView.allocate(arena);
        DiplomatStringView.len(fieldCView, fieldCLen);
        DiplomatStringView.data(fieldCView, fieldCData);
        dev.diplomattest.somelib.ntv.BorrowedFieldsWithBounds.field_c(returnVal, fieldCView);
        

        return returnVal;

    }
    
}


============================
package dev.diplomattest.somelib;

import dev.diplomattest.somelib.ntv.*;


import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.ref.Cleaner;
import java.util.List;
import static java.lang.foreign.ValueLayout.*;
import java.nio.charset.StandardCharsets;
import java.util.stream.Stream;

public class Bar {

    MemorySegment internal;
    Cleaner.Cleanable cleanable;
    SegmentAllocator arena;

    List<Object> selfEdges = List.of();
    List<Object> bEdges = List.of();
    List<Object> aEdges = List.of();
    

    static class BarCleaner implements Runnable {

        MemorySegment segment;
        BarCleaner(MemorySegment segment) {
            this.segment = segment;
        }

        public void run() {
            somelib_h.Bar_destroy(this.segment);
        }
    }

    Bar() {}
    Bar(MemorySegment handle, List<Object> selfEdges, List<Object> bEdges, List<Object> aEdges) {
        this.internal = handle;
        this.selfEdges = selfEdges;
        this.bEdges = bEdges;
        this.aEdges = aEdges;
        

    }
    
    
}
============================
package dev.diplomattest.somelib;

import dev.diplomattest.somelib.ntv.*;


import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.ref.Cleaner;
import java.util.List;
import static java.lang.foreign.ValueLayout.*;
import java.nio.charset.StandardCharsets;
import java.util.stream.Stream;

public class Foo {

    MemorySegment internal;
    Cleaner.Cleanable cleanable;
    SegmentAllocator arena;

    List<Object> selfEdges = List.of();
    List<Object> aEdges = List.of();
    

    static class FooCleaner implements Runnable {

        MemorySegment segment;
        FooCleaner(MemorySegment segment) {
            this.segment = segment;
        }

        public void run() {
            somelib_h.Foo_destroy(this.segment);
        }
    }

    Foo() {}
    Foo(MemorySegment handle, List<Object> selfEdges, List<Object> aEdges) {
        this.internal = handle;
        this.selfEdges = selfEdges;
        this.aEdges = aEdges;
        

    }
    
    public static Foo new_(String x) {
        
        try (var arena = Arena.ofConfined()) {
            var xData= Arena.ofAuto().allocateFrom(x, StandardCharsets.UTF_8);
            var xLen = xData.byteSize() - 1;  // allocated strings are null terminated
            var xView = DiplomatStringView.allocate(Arena.ofAuto());
            DiplomatStringView.len(xView, xLen);
            DiplomatStringView.data(xView, xData);
            var nativeVal = somelib_h.Foo_new(xView);
            
            List<Object> selfEdges = List.of();
            
            
            
            List<Object> aEdges = List.of(x);
            var returnVal = new Foo(nativeVal, selfEdges, aEdges);
            return returnVal;
                    
        }
    }
    
    public static Foo extractFromFields(BorrowedFields fields) {
        
        try (var arena = Arena.ofConfined()) {
            var fieldsNative = fields.toNative(arena);
            var nativeVal = somelib_h.Foo_extract_from_fields(fieldsNative);
            
            List<Object> selfEdges = List.of();
            
            
            
            List<Object> aEdges = List.of(fields);
            var returnVal = new Foo(nativeVal, selfEdges, aEdges);
            return returnVal;
                    
        }
    }
    
    public static Foo extractFromBounds(BorrowedFieldsWithBounds bounds,String anotherString) {
        
        try (var arena = Arena.ofConfined()) {
            var boundsNative = bounds.toNative(arena);
            var anotherStringData= Arena.ofAuto().allocateFrom(anotherString, StandardCharsets.UTF_8);
            var anotherStringLen = anotherStringData.byteSize() - 1;  // allocated strings are null terminated
            var anotherStringView = DiplomatStringView.allocate(Arena.ofAuto());
            DiplomatStringView.len(anotherStringView, anotherStringLen);
            DiplomatStringView.data(anotherStringView, anotherStringData);
            var nativeVal = somelib_h.Foo_extract_from_bounds(boundsNative, anotherStringView);
            
            List<Object> selfEdges = List.of();
            
            
            
            List<Object> aEdges = List.of(bounds, bounds, anotherString);
            var returnVal = new Foo(nativeVal, selfEdges, aEdges);
            return returnVal;
                    
        }
    }
    
    
    public Bar getBar() {
        
        
        var nativeVal = somelib_h.Foo_get_bar(internal);
        
        List<Object> selfEdges = List.of();
        
        
        
        List<Object> bEdges = List.of(this);
        List<Object> aEdges = List.of(this);
        var returnVal = new Bar(nativeVal, selfEdges, bEdges, aEdges);
        return returnVal;
                
    }
    
    public BorrowedFieldsReturning asReturning() {
        
        try (var arena = Arena.ofConfined()) {
            
            
            var nativeVal = somelib_h.Foo_as_returning(arena, internal);
            
            var returnVal = new BorrowedFieldsReturning(nativeVal, List.of());
            return returnVal;
                    
        }
    }
    
}
============================
