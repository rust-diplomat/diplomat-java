// Generated by jextract

package dev.diplomattest.somelib.ntv;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct NestedBorrowedFields {
 *     BorrowedFields fields;
 *     BorrowedFieldsWithBounds bounds;
 *     BorrowedFieldsWithBounds bounds2;
 * }
 * }
 */
public class NestedBorrowedFields {

    NestedBorrowedFields() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        BorrowedFields.layout().withName("fields"),
        BorrowedFieldsWithBounds.layout().withName("bounds"),
        BorrowedFieldsWithBounds.layout().withName("bounds2")
    ).withName("NestedBorrowedFields");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout fields$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("fields"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BorrowedFields fields
     * }
     */
    public static final GroupLayout fields$layout() {
        return fields$LAYOUT;
    }

    private static final long fields$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BorrowedFields fields
     * }
     */
    public static final long fields$offset() {
        return fields$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BorrowedFields fields
     * }
     */
    public static MemorySegment fields(MemorySegment struct) {
        return struct.asSlice(fields$OFFSET, fields$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BorrowedFields fields
     * }
     */
    public static void fields(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fields$OFFSET, fields$LAYOUT.byteSize());
    }

    private static final GroupLayout bounds$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("bounds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BorrowedFieldsWithBounds bounds
     * }
     */
    public static final GroupLayout bounds$layout() {
        return bounds$LAYOUT;
    }

    private static final long bounds$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BorrowedFieldsWithBounds bounds
     * }
     */
    public static final long bounds$offset() {
        return bounds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BorrowedFieldsWithBounds bounds
     * }
     */
    public static MemorySegment bounds(MemorySegment struct) {
        return struct.asSlice(bounds$OFFSET, bounds$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BorrowedFieldsWithBounds bounds
     * }
     */
    public static void bounds(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bounds$OFFSET, bounds$LAYOUT.byteSize());
    }

    private static final GroupLayout bounds2$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("bounds2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BorrowedFieldsWithBounds bounds2
     * }
     */
    public static final GroupLayout bounds2$layout() {
        return bounds2$LAYOUT;
    }

    private static final long bounds2$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BorrowedFieldsWithBounds bounds2
     * }
     */
    public static final long bounds2$offset() {
        return bounds2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BorrowedFieldsWithBounds bounds2
     * }
     */
    public static MemorySegment bounds2(MemorySegment struct) {
        return struct.asSlice(bounds2$OFFSET, bounds2$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BorrowedFieldsWithBounds bounds2
     * }
     */
    public static void bounds2(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bounds2$OFFSET, bounds2$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

