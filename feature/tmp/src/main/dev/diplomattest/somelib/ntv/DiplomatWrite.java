// Generated by jextract

package dev.diplomattest.somelib.ntv;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct DiplomatWrite {
 *     void *context;
 *     char *buf;
 *     size_t len;
 *     size_t cap;
 *     bool grow_failed;
 *     void (*flush)(struct DiplomatWrite *);
 *     bool (*grow)(struct DiplomatWrite *, size_t);
 * }
 * }
 */
public class DiplomatWrite {

    DiplomatWrite() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        somelib_h.C_POINTER.withName("context"),
        somelib_h.C_POINTER.withName("buf"),
        somelib_h.C_LONG.withName("len"),
        somelib_h.C_LONG.withName("cap"),
        somelib_h.C_BOOL.withName("grow_failed"),
        MemoryLayout.paddingLayout(7),
        somelib_h.C_POINTER.withName("flush"),
        somelib_h.C_POINTER.withName("grow")
    ).withName("DiplomatWrite");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *context
     * }
     */
    public static final AddressLayout context$layout() {
        return context$LAYOUT;
    }

    private static final long context$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *context
     * }
     */
    public static final long context$offset() {
        return context$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *context
     * }
     */
    public static MemorySegment context(MemorySegment struct) {
        return struct.get(context$LAYOUT, context$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *context
     * }
     */
    public static void context(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(context$LAYOUT, context$OFFSET, fieldValue);
    }

    private static final AddressLayout buf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *buf
     * }
     */
    public static final AddressLayout buf$layout() {
        return buf$LAYOUT;
    }

    private static final long buf$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *buf
     * }
     */
    public static final long buf$offset() {
        return buf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *buf
     * }
     */
    public static MemorySegment buf(MemorySegment struct) {
        return struct.get(buf$LAYOUT, buf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *buf
     * }
     */
    public static void buf(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buf$LAYOUT, buf$OFFSET, fieldValue);
    }

    private static final OfLong len$LAYOUT = (OfLong)$LAYOUT.select(groupElement("len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t len
     * }
     */
    public static final OfLong len$layout() {
        return len$LAYOUT;
    }

    private static final long len$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t len
     * }
     */
    public static final long len$offset() {
        return len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t len
     * }
     */
    public static long len(MemorySegment struct) {
        return struct.get(len$LAYOUT, len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t len
     * }
     */
    public static void len(MemorySegment struct, long fieldValue) {
        struct.set(len$LAYOUT, len$OFFSET, fieldValue);
    }

    private static final OfLong cap$LAYOUT = (OfLong)$LAYOUT.select(groupElement("cap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t cap
     * }
     */
    public static final OfLong cap$layout() {
        return cap$LAYOUT;
    }

    private static final long cap$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t cap
     * }
     */
    public static final long cap$offset() {
        return cap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t cap
     * }
     */
    public static long cap(MemorySegment struct) {
        return struct.get(cap$LAYOUT, cap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t cap
     * }
     */
    public static void cap(MemorySegment struct, long fieldValue) {
        struct.set(cap$LAYOUT, cap$OFFSET, fieldValue);
    }

    private static final OfBoolean grow_failed$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("grow_failed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool grow_failed
     * }
     */
    public static final OfBoolean grow_failed$layout() {
        return grow_failed$LAYOUT;
    }

    private static final long grow_failed$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool grow_failed
     * }
     */
    public static final long grow_failed$offset() {
        return grow_failed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool grow_failed
     * }
     */
    public static boolean grow_failed(MemorySegment struct) {
        return struct.get(grow_failed$LAYOUT, grow_failed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool grow_failed
     * }
     */
    public static void grow_failed(MemorySegment struct, boolean fieldValue) {
        struct.set(grow_failed$LAYOUT, grow_failed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*flush)(struct DiplomatWrite *)
     * }
     */
    public static class flush {

        flush() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            somelib_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = somelib_h.upcallHandle(flush.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(flush.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout flush$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("flush"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*flush)(struct DiplomatWrite *)
     * }
     */
    public static final AddressLayout flush$layout() {
        return flush$LAYOUT;
    }

    private static final long flush$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*flush)(struct DiplomatWrite *)
     * }
     */
    public static final long flush$offset() {
        return flush$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*flush)(struct DiplomatWrite *)
     * }
     */
    public static MemorySegment flush(MemorySegment struct) {
        return struct.get(flush$LAYOUT, flush$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*flush)(struct DiplomatWrite *)
     * }
     */
    public static void flush(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(flush$LAYOUT, flush$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * bool (*grow)(struct DiplomatWrite *, size_t)
     * }
     */
    public static class grow {

        grow() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            boolean apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            somelib_h.C_BOOL,
            somelib_h.C_POINTER,
            somelib_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = somelib_h.upcallHandle(grow.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(grow.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static boolean invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                return (boolean) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout grow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("grow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool (*grow)(struct DiplomatWrite *, size_t)
     * }
     */
    public static final AddressLayout grow$layout() {
        return grow$LAYOUT;
    }

    private static final long grow$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool (*grow)(struct DiplomatWrite *, size_t)
     * }
     */
    public static final long grow$offset() {
        return grow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool (*grow)(struct DiplomatWrite *, size_t)
     * }
     */
    public static MemorySegment grow(MemorySegment struct) {
        return struct.get(grow$LAYOUT, grow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool (*grow)(struct DiplomatWrite *, size_t)
     * }
     */
    public static void grow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(grow$LAYOUT, grow$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

